# legal_qa_rag/rag_service/Dockerfile.worker
# How to build: from root run
# docker build -t worker_service:v1.0.0 -f rag_service/Dockerfile.worker .  
### Stage 1: Builder ###
FROM public.ecr.aws/lambda/python:3.12 AS builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /var/task

# Upgrade pip and install application-specific requirements
COPY rag_service/worker_requirements.txt ${LAMBDA_TASK_ROOT}
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r worker_requirements.txt

# Create necessary directories for shared_libs
RUN mkdir -p shared_libs/utils shared_libs/config shared_libs/prompts shared_libs/schemas

# Copy only the necessary shared_libs modules
COPY shared_libs/shared_libs/utils/logger.py ${LAMBDA_TASK_ROOT}/shared_libs/utils/logger.py
COPY shared_libs/shared_libs/utils/aws_auth_validation.py ${LAMBDA_TASK_ROOT}/shared_libs/utils/aws_auth_validation.py
COPY shared_libs/shared_libs/config/ ${LAMBDA_TASK_ROOT}/shared_libs/config/
COPY shared_libs/shared_libs/llm_providers/ ${LAMBDA_TASK_ROOT}/shared_libs/llm_providers/
COPY shared_libs/shared_libs/embeddings/ ${LAMBDA_TASK_ROOT}/shared_libs/embeddings/
COPY shared_libs/shared_libs/models/ ${LAMBDA_TASK_ROOT}/shared_libs/models/
COPY shared_libs/setup.py ${LAMBDA_TASK_ROOT}/shared_libs/setup.py
COPY shared_libs/shared_libs/__init__.py ${LAMBDA_TASK_ROOT}/shared_libs/__init__.py

# Install shared_libs as an editable package
RUN pip install --no-cache-dir -e shared_libs

# Copy the source code for the worker handler
COPY rag_service/src ${LAMBDA_TASK_ROOT}/

### Stage 2: Runtime ###
FROM public.ecr.aws/lambda/python:3.12

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV IS_USING_IMAGE_RUNTIME=True
# Set work directory
WORKDIR /var/task

# Copy the Python packages and application code from the builder
COPY --from=builder /var/task/. /var/task/


# Define the CMD to point to the handler
CMD ["handlers.work_handler.handler"]