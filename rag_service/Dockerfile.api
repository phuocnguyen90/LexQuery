# rag_service/Dockerfile.api
# How to build: from root run
# docker build -t api_service:v1.0.0 -f rag_service/Dockerfile.api .  

### Stage 1: Builder ###
FROM public.ecr.aws/lambda/python:3.12 AS builder

# Set work directory
WORKDIR /var/task

# Copy and install Python dependencies
COPY rag_service/api_requirements.txt ${LAMBDA_TASK_ROOT}
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r api_requirements.txt

# Create necessary directories for shared_libs
RUN mkdir -p shared_libs/utils shared_libs/config shared_libs/prompts shared_libs/schemas

# Copy shared_libs modules
COPY shared_libs/shared_libs/utils/logger.py shared_libs/utils/logger.py
COPY shared_libs/shared_libs/utils/aws_auth_validation.py shared_libs/utils/aws_auth_validation.py
COPY shared_libs/shared_libs/config/ shared_libs/config/
COPY shared_libs/setup.py shared_libs/setup.py
COPY shared_libs/shared_libs/__init__.py shared_libs/__init__.py

# Install shared_libs as an editable package
RUN pip install --no-cache-dir -e shared_libs

# Copy the source code for the API handler
COPY rag_service/src /var/task/src

### Stage 2: Runtime ###
FROM public.ecr.aws/lambda/python:3.12

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# Set work directory
WORKDIR /var/task

# Copy the Python packages and application code from the builder
COPY --from=builder /var/task/. /var/task/

