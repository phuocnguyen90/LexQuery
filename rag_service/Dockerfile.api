# rag_service/Dockerfile.api
# How to build: from root run
# docker build -t api_service:v1.0.0 -f rag_service/Dockerfile.api .  

# Use the AWS Lambda Python 3.12 base image
FROM public.ecr.aws/lambda/python:3.12

# Install basic Python dependencies into LAMBDA_TASK_ROOT
COPY rag_service/requirements.txt ${LAMBDA_TASK_ROOT}/requirements.txt
RUN pip install --no-cache-dir -r ${LAMBDA_TASK_ROOT}/requirements.txt --target /var/lang/lib/python3.12/site-packages

# Install API service Python dependencies into LAMBDA_TASK_ROOT
COPY rag_service/api_requirements.txt ${LAMBDA_TASK_ROOT}/api_requirements.txt
RUN pip install --no-cache-dir -r ${LAMBDA_TASK_ROOT}/api_requirements.txt --target /var/lang/lib/python3.12/site-packages

# Install shared libraries into LAMBDA_TASK_ROOT
COPY shared_libs/ ${LAMBDA_TASK_ROOT}
RUN pip install -e shared_libs

# Copy the source code for the Worker handler into LAMBDA_TASK_ROOT
COPY rag_service/src/ ${LAMBDA_TASK_ROOT}/
COPY rag_service/src/bin/uvicorn /var/lang/bin

# Ensure Uvicorn's shebang is correctly configured
RUN if [ -f /var/lang/lib/python3.12/site-packages/bin/uvicorn ]; then \
        sed -i '1s|^#!.*|#!/var/lang/bin/python3|' /var/lang/lib/python3.12/site-packages/bin/uvicorn && \
        cp /var/lang/lib/python3.12/site-packages/bin/uvicorn /var/lang/bin/uvicorn && \
        chmod +x /var/lang/bin/uvicorn; \
    fi

# Set the working directory
WORKDIR ${LAMBDA_TASK_ROOT}

# Copy the entrypoint script
COPY rag_service/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set environment variable to specify handler type
ENV CMD_HANDLER=api

# Define the entrypoint
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"]

EXPOSE 8000

# Define the CMD to point to the Lambda handler (used in production)
CMD ["api_handler.handler"]
